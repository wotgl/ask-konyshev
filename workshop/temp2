return render(requests, 'index.html', {})


TEMPLATE_DIRS = {
	BASE_DIR + '/templates',
	BASE_DIR + '/../templates', //1 of 2
}



<div class="container">
	<div class="row">
		<div class="span8">

		</div>

		<div class="span4">

		</div>
	</div>
</div>


<h1>Top Questions</h1>


in questions:
#django
	for n in str:
		...


.question{

	.question:last-child{	//псевдоклассы, для некоторых объектов
		margin bottom: 15px;
	}
	.question__left
	{
		floar:left;
		wigth:20%;
		box-sizing:border-box;	//что бы ширина не включала padding
	}
	.question__right
	{
		floar:left;
		wigth:80%;
	}
}


lorempixel.com - random pics


mb create class questions
	>> question[0]
	>> ...


	/question/{{q.id}}
	OR
	{{url 'index' q.id}} <- best



	div
	position absolute
	bottom 0


	Вся бизнес-логика в Model!!!
	STATIC_ROOT не особо нужно
	MEDIA_ROOT полный путь куда загружать файлы пользователя
	MEDIA_URL префикс в урле

	Использовать отностильные пути.
	BASE_DIR

	сделать разделение на:
	global_settings.py (пути, БД и т.д.)
	local_settings.py

	+ инклюдить урлы

	регулярка (\d+) <=> 12345

	делать отдельные вьюшки(не контроллеры, которые django.views)

	сделать 404(если станица не существует, то вернуть 404)


	(?P<pk>\d+)
	Поместить переменнную в pk


	проверять параметры GET/POST


	для настроек профиля авторизованного пользователя или добавления вопросов:
	from django.contrib.auth.decorators import @login_required(login_url='/login/')

	роутер - урлс
	контроллер - вью

	использовать {{content | safe}}

	как вариант вынести пагинатор в include


	context-processor mb for best users;

	